-- ===============================================================================
-- Database Exploration
-- ===============================================================================

show tables from bikestoredb;

-- ===============================================================================
-- Dimensions Exploration
-- ===============================================================================

-- Retrieve a list of unique countries from which customers originate
select distinct country
from customers
order by country;

-- Retrieve a list of unique categories, subcategories, and products
select distinct product_name, category, product_name
from products;

-- ===============================================================================
-- Date Range Exploration 
-- ===============================================================================

-- Determine the first and last order date and the total duration in months
select
	min(order_date) As First_Order_Date,
    max(order_date) AS Last_Order_Date,
timestampdiff(month, min(order_date), max(order_date)) AS Order_range_months
from sales;

-- Find the youngest and oldest customer based on birthdate
select 
	min(birthdate) AS Oldest_Customer,
    max(birthdate) AS Youngest_Customer
from customers;

-- ===============================================================================
-- Measures Exploration (Key Metrics)
-- ===============================================================================

-- Find the Total Sales
select sum(price) AS Total_sales
from sales;

-- Find how many items are sold
select sum(quantity)
from sales;

-- Find the average selling price
select round(avg(price),2) AS Avg_Saling_Price
from sales;

-- Find the Total number of Orders
select count(order_number) AS Total_Orders
from sales;

select count(distinct order_number) AS Total_Unique_orders
from sales;

-- Find the total number of products
select count(product_id) AS Total_products
from products;

-- Find the total number of customers
select count(customer_id) AS Total_Customer
from customers;

-- Find the total number of customers that has placed an order
select count(distinct customer_key) AS Total_Customer_Placed_Order
from customers;

-- Generate a Report that shows all key metrics of the business
select 'Total Sales' As measure_name, round(sum(sales_amount),0) AS Measure_Value from sales
union all
select 'Total Quantity', round(sum(quantity),0) from sales
union all
select 'Average Price', round(avg(price),0) from sales
union all
select 'Total Orders', round(count(distinct order_number),0) from sales
union all
select 'Total Products', round(count(distinct product_name),0) from products
union all
select 'Total Customers', round(count(distinct customer_key),0) from customers;

-- ============================================================================
-- Magnitude Analysis
-- ===========================================================================

-- Find total customers by countries
select country, count(customer_key) AS Total_customers
from customers
group by country
order by Total_customers desc;

-- Find total customers by gender
select gender, count(customer_key) AS Total_Customers
from customers
group by gender
order by Total_Customers desc;

-- Find total products by category
select category, count(product_id) AS Total_products
from products
group by category
order by Total_products desc;

-- What is the average costs in each category?
select category, round(avg(cost),2) AS Avg_Cost
from products
group by category
order by Avg_Cost desc;

-- What is the total revenue generated for each category?
select p.category, sum(s.sales_amount) AS Total_Revenue
from products p
join sales s
on p.product_key = s.product_key
group by p.category
order by Total_Revenue desc;

-- What is the total revenue generated by each customer?
select c.customer_key, c.first_name, c.last_name,
		sum(s.sales_amount) AS Total_Revenue
from customers c
left join sales s
on c.customer_key = s.customer_key
group by c.customer_key, c.first_name, c.last_name
order by Total_revenue desc
limit 10;

-- What is the distribution of sold items across countries?
select c.country, sum(s.quantity) AS Distribution
from customers c
left join sales s
on c.customer_key = s.customer_key
group by c.country
order by Distribution desc;

-- ===============================================================================
-- Ranking Analysis
-- ===============================================================================

-- Which 5 products Generating the Highest Revenue?
select p.product_name, sum(s.sales_amount) AS highest_revenue
from products p
left join sales s
on p.product_key = s.product_key
group by p.product_name
order by highest_revenue desc
limit 5;

-- Complex but Flexibly Ranking Using Window Functions
select * from (
	select p.product_name,
    sum(s.sales_amount) AS Total_revenue,
    rank() over(order by sum(s.sales_amount) desc) AS rank_products
from products p
left join sales s
on p.product_key = s.product_key
group by p.product_name
)
AS racked_products
where rank_products <= 5;

-- What are the 5 worst-performing products in terms of sales?
select p.product_name, sum(s.sales_amount) AS Revenue
from products p 
left join sales s
on p.product_key = s.product_key
where s.sales_amount is not null
group by p.product_name
order by Revenue asc
limit 5;

-- Find the top 10 customers who have generated the highest revenue
select c.customer_key, c.first_name, c.last_name, sum(s.sales_amount) AS Total_revenue
from customers c 
left join sales s 
on c.customer_key = s.customer_key
group by c.customer_key, c.first_name, c.last_name
order by Total_revenue desc
limit 10;

-- The 3 customers with the fewest orders placed
select c.customer_key, c.first_name, c.last_name, count(distinct s.order_number) AS Placed_order
from customers c 
left join sales s 
on c.customer_key = s.customer_key
group by c.customer_key, c.first_name, c.last_name
order by Placed_order asc
limit 3;

-- ===============================================================================
-- Change Over Time Analysis
-- ===============================================================================
-- Analyse sales performance over time
select year(order_date) AS order_year,
		month(order_date) AS order_month,
        sum(sales_amount) AS total_sales,
        count(distinct customer_key) AS total_customers,
        sum(quantity) AS total_quantity
from sales s
where order_date IS not null
group by year(order_date), month(order_date)
order by year(order_date), month(order_date) desc;

-- ===============================================================================
-- Cumulative Analysis
-- ===============================================================================
-- Calculate the total sales per month and the running total of sales over time 
select order_month,
		total_sales,
        sum(total_sales) over(order by order_month) AS running_total_sales,
        avg(avg_price) over(order by order_month) AS moving_avera_price
	from (
		select 
			date_format(order_date, '%Y-%m') AS order_month,
            sum(sales_amount) AS total_sales,
            avg(price) AS avg_price
		from sales
        where order_date is not null
        group by date_format(order_date, '%Y-%m')
) t
order by order_month;

-- ===============================================================================
-- Performance Analysis (Year-over-Year, Month-over-Month)
-- ===============================================================================
/* Analyze the yearly performance of products by comparing their sales to both the average sales performance of the product and the previous year's sales */
WITH yearly_sales AS (
    SELECT 
        product_key,
        YEAR(order_date) AS sales_year,
        SUM(sales_amount) AS total_sales
    FROM sales
    WHERE order_date IS NOT NULL
    GROUP BY product_key, YEAR(order_date)
),

avg_sales AS (
    SELECT 
        product_key,
        AVG(total_sales) AS avg_yearly_sales
    FROM yearly_sales
    GROUP BY product_key
)

SELECT 
    y.product_key,
    y.sales_year,
    y.total_sales,
    a.avg_yearly_sales,
    COALESCE(LAG(y.total_sales) OVER (PARTITION BY y.product_key ORDER BY y.sales_year), 0) AS prev_year_sales,
    COALESCE(y.total_sales - LAG(y.total_sales) OVER (PARTITION BY y.product_key ORDER BY y.sales_year), 0) AS yoy_difference,
    ROUND((y.total_sales / a.avg_yearly_sales)*100, 2) AS performance_vs_avg_percent
FROM yearly_sales y
JOIN avg_sales a 
  ON y.product_key = a.product_key
ORDER BY y.product_key, y.sales_year;

-- ===============================================================================
-- Data Segmentation Analysis
-- ===============================================================================
-- Segment products into cost ranges and count how many products fall into each segment
SELECT 
    CASE 
        WHEN cost < 100 THEN 'Low Cost (<100)'
        WHEN cost BETWEEN 100 AND 500 THEN 'Medium Cost (100-500)'
        WHEN cost BETWEEN 501 AND 1000 THEN 'High Cost (501-1000)'
        ELSE 'Premium Cost (>1000)'
    END AS Cost_Range,
    COUNT(*) AS Product_Count
FROM products
GROUP BY Cost_Range
ORDER BY MIN(cost);

/*Group customers into three segments based on their spending behavior:
	- VIP: Customers with at least 12 months of history and spending more than €5,000.
	- Regular: Customers with at least 12 months of history but spending €5,000 or less.
	- New: Customers with a lifespan less than 12 months.
And find the total number of customers by each group
*/
SELECT Customer_Segment, COUNT(*) AS Total_Customers
FROM (
    SELECT 
        c.customer_key,
        CASE 
            WHEN TIMESTAMPDIFF(MONTH, MIN(s.order_date), MAX(s.order_date)) >= 12 
                 AND SUM(s.sales_amount) > 5000 
                THEN 'VIP'
            WHEN TIMESTAMPDIFF(MONTH, MIN(s.order_date), MAX(s.order_date)) >= 12 
                 AND SUM(s.sales_amount) <= 5000 
                THEN 'Regular'
            ELSE 'New'
        END AS Customer_Segment
    FROM customers c
    JOIN sales s ON c.customer_key = s.customer_key
    GROUP BY c.customer_key
) t
GROUP BY Customer_Segment
ORDER BY Total_Customers DESC;

-- ===============================================================================
-- Part-to-Whole Analysis
-- ===============================================================================
-- Which categories contribute the most to overall sales?
SELECT 
    p.category,
    SUM(s.sales_amount) AS total_sales,
    ROUND(100 * SUM(s.sales_amount) / (SELECT SUM(sales_amount) FROM sales), 2) AS pct_contribution
FROM sales s
JOIN products p ON s.product_key = p.product_key
GROUP BY p.category
ORDER BY total_sales DESC;

